#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhamacyDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="D:\\CSD\\PANOS\\PROJECT\\PHAMACYDB\\PHAMACYDB\\APP_DATA\\DATABASE.MDF")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertInteractionPharmacyPharmacy(InteractionPharmacyPharmacy instance);
    partial void UpdateInteractionPharmacyPharmacy(InteractionPharmacyPharmacy instance);
    partial void DeleteInteractionPharmacyPharmacy(InteractionPharmacyPharmacy instance);
    partial void InsertInteractionPharmacySubCategory(InteractionPharmacySubCategory instance);
    partial void UpdateInteractionPharmacySubCategory(InteractionPharmacySubCategory instance);
    partial void DeleteInteractionPharmacySubCategory(InteractionPharmacySubCategory instance);
    partial void InsertPharmacyChemical(PharmacyChemical instance);
    partial void UpdatePharmacyChemical(PharmacyChemical instance);
    partial void DeletePharmacyChemical(PharmacyChemical instance);
    partial void InsertPharmacyCommercial(PharmacyCommercial instance);
    partial void UpdatePharmacyCommercial(PharmacyCommercial instance);
    partial void DeletePharmacyCommercial(PharmacyCommercial instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<InteractionPharmacyPharmacy> InteractionPharmacyPharmacies
		{
			get
			{
				return this.GetTable<InteractionPharmacyPharmacy>();
			}
		}
		
		public System.Data.Linq.Table<InteractionPharmacySubCategory> InteractionPharmacySubCategories
		{
			get
			{
				return this.GetTable<InteractionPharmacySubCategory>();
			}
		}
		
		public System.Data.Linq.Table<PharmacyChemical> PharmacyChemicals
		{
			get
			{
				return this.GetTable<PharmacyChemical>();
			}
		}
		
		public System.Data.Linq.Table<PharmacyCommercial> PharmacyCommercials
		{
			get
			{
				return this.GetTable<PharmacyCommercial>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _categoryName;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryNameChanging(string value);
    partial void OncategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[Column(Storage="_categoryName", DbType="NChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string categoryName
		{
			get
			{
				return this._categoryName;
			}
			set
			{
				if ((this._categoryName != value))
				{
					this.OncategoryNameChanging(value);
					this.SendPropertyChanging();
					this._categoryName = value;
					this.SendPropertyChanged("categoryName");
					this.OncategoryNameChanged();
				}
			}
		}
		
		[Association(Name="Category_SubCategory", Storage="_SubCategories", ThisKey="categoryName", OtherKey="categoryName")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.InteractionPharmacyPharmacy")]
	public partial class InteractionPharmacyPharmacy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _pharmacyname1;
		
		private string _pharmacyname2;
		
		private string _comment;
		
		private EntityRef<PharmacyChemical> _PharmacyChemical;
		
		private EntityRef<PharmacyChemical> _PharmacyChemical1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpharmacyname1Changing(string value);
    partial void Onpharmacyname1Changed();
    partial void Onpharmacyname2Changing(string value);
    partial void Onpharmacyname2Changed();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public InteractionPharmacyPharmacy()
		{
			this._PharmacyChemical = default(EntityRef<PharmacyChemical>);
			this._PharmacyChemical1 = default(EntityRef<PharmacyChemical>);
			OnCreated();
		}
		
		[Column(Storage="_pharmacyname1", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pharmacyname1
		{
			get
			{
				return this._pharmacyname1;
			}
			set
			{
				if ((this._pharmacyname1 != value))
				{
					if (this._PharmacyChemical.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpharmacyname1Changing(value);
					this.SendPropertyChanging();
					this._pharmacyname1 = value;
					this.SendPropertyChanged("pharmacyname1");
					this.Onpharmacyname1Changed();
				}
			}
		}
		
		[Column(Storage="_pharmacyname2", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pharmacyname2
		{
			get
			{
				return this._pharmacyname2;
			}
			set
			{
				if ((this._pharmacyname2 != value))
				{
					if (this._PharmacyChemical1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpharmacyname2Changing(value);
					this.SendPropertyChanging();
					this._pharmacyname2 = value;
					this.SendPropertyChanged("pharmacyname2");
					this.Onpharmacyname2Changed();
				}
			}
		}
		
		[Column(Storage="_comment", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacyPharmacy", Storage="_PharmacyChemical", ThisKey="pharmacyname1", OtherKey="chemicalName", IsForeignKey=true)]
		public PharmacyChemical PharmacyChemical
		{
			get
			{
				return this._PharmacyChemical.Entity;
			}
			set
			{
				PharmacyChemical previousValue = this._PharmacyChemical.Entity;
				if (((previousValue != value) 
							|| (this._PharmacyChemical.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PharmacyChemical.Entity = null;
						previousValue.InteractionPharmacyPharmacies.Remove(this);
					}
					this._PharmacyChemical.Entity = value;
					if ((value != null))
					{
						value.InteractionPharmacyPharmacies.Add(this);
						this._pharmacyname1 = value.chemicalName;
					}
					else
					{
						this._pharmacyname1 = default(string);
					}
					this.SendPropertyChanged("PharmacyChemical");
				}
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacyPharmacy1", Storage="_PharmacyChemical1", ThisKey="pharmacyname2", OtherKey="chemicalName", IsForeignKey=true)]
		public PharmacyChemical PharmacyChemical1
		{
			get
			{
				return this._PharmacyChemical1.Entity;
			}
			set
			{
				PharmacyChemical previousValue = this._PharmacyChemical1.Entity;
				if (((previousValue != value) 
							|| (this._PharmacyChemical1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PharmacyChemical1.Entity = null;
						previousValue.InteractionPharmacyPharmacies1.Remove(this);
					}
					this._PharmacyChemical1.Entity = value;
					if ((value != null))
					{
						value.InteractionPharmacyPharmacies1.Add(this);
						this._pharmacyname2 = value.chemicalName;
					}
					else
					{
						this._pharmacyname2 = default(string);
					}
					this.SendPropertyChanged("PharmacyChemical1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InteractionPharmacySubCategory")]
	public partial class InteractionPharmacySubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _chemicalName;
		
		private string _subCategoryName;
		
		private string _comment;
		
		private EntityRef<PharmacyChemical> _PharmacyChemical;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnchemicalNameChanging(string value);
    partial void OnchemicalNameChanged();
    partial void OnsubCategoryNameChanging(string value);
    partial void OnsubCategoryNameChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public InteractionPharmacySubCategory()
		{
			this._PharmacyChemical = default(EntityRef<PharmacyChemical>);
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[Column(Storage="_chemicalName", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string chemicalName
		{
			get
			{
				return this._chemicalName;
			}
			set
			{
				if ((this._chemicalName != value))
				{
					if (this._PharmacyChemical.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchemicalNameChanging(value);
					this.SendPropertyChanging();
					this._chemicalName = value;
					this.SendPropertyChanged("chemicalName");
					this.OnchemicalNameChanged();
				}
			}
		}
		
		[Column(Storage="_subCategoryName", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subCategoryName
		{
			get
			{
				return this._subCategoryName;
			}
			set
			{
				if ((this._subCategoryName != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._subCategoryName = value;
					this.SendPropertyChanged("subCategoryName");
					this.OnsubCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacySubCategory", Storage="_PharmacyChemical", ThisKey="chemicalName", OtherKey="chemicalName", IsForeignKey=true)]
		public PharmacyChemical PharmacyChemical
		{
			get
			{
				return this._PharmacyChemical.Entity;
			}
			set
			{
				PharmacyChemical previousValue = this._PharmacyChemical.Entity;
				if (((previousValue != value) 
							|| (this._PharmacyChemical.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PharmacyChemical.Entity = null;
						previousValue.InteractionPharmacySubCategories.Remove(this);
					}
					this._PharmacyChemical.Entity = value;
					if ((value != null))
					{
						value.InteractionPharmacySubCategories.Add(this);
						this._chemicalName = value.chemicalName;
					}
					else
					{
						this._chemicalName = default(string);
					}
					this.SendPropertyChanged("PharmacyChemical");
				}
			}
		}
		
		[Association(Name="SubCategory_InteractionPharmacySubCategory", Storage="_SubCategory", ThisKey="subCategoryName", OtherKey="subCategoryName", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.InteractionPharmacySubCategories.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.InteractionPharmacySubCategories.Add(this);
						this._subCategoryName = value.subCategoryName;
					}
					else
					{
						this._subCategoryName = default(string);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PharmacyChemical")]
	public partial class PharmacyChemical : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _chemicalName;
		
		private string _greekName;
		
		private string _indication;
		
		private string _contraIndication;
		
		private string _undesirableReactions;
		
		private string _dose;
		
		private string _interactionGeneral;
		
		private string _subCategoryName;
		
		private EntitySet<InteractionPharmacyPharmacy> _InteractionPharmacyPharmacies;
		
		private EntitySet<InteractionPharmacyPharmacy> _InteractionPharmacyPharmacies1;
		
		private EntitySet<InteractionPharmacySubCategory> _InteractionPharmacySubCategories;
		
		private EntitySet<PharmacyCommercial> _PharmacyCommercials;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnchemicalNameChanging(string value);
    partial void OnchemicalNameChanged();
    partial void OngreekNameChanging(string value);
    partial void OngreekNameChanged();
    partial void OnindicationChanging(string value);
    partial void OnindicationChanged();
    partial void OncontraIndicationChanging(string value);
    partial void OncontraIndicationChanged();
    partial void OnundesirableReactionsChanging(string value);
    partial void OnundesirableReactionsChanged();
    partial void OndoseChanging(string value);
    partial void OndoseChanged();
    partial void OninteractionGeneralChanging(string value);
    partial void OninteractionGeneralChanged();
    partial void OnsubCategoryNameChanging(string value);
    partial void OnsubCategoryNameChanged();
    #endregion
		
		public PharmacyChemical()
		{
			this._InteractionPharmacyPharmacies = new EntitySet<InteractionPharmacyPharmacy>(new Action<InteractionPharmacyPharmacy>(this.attach_InteractionPharmacyPharmacies), new Action<InteractionPharmacyPharmacy>(this.detach_InteractionPharmacyPharmacies));
			this._InteractionPharmacyPharmacies1 = new EntitySet<InteractionPharmacyPharmacy>(new Action<InteractionPharmacyPharmacy>(this.attach_InteractionPharmacyPharmacies1), new Action<InteractionPharmacyPharmacy>(this.detach_InteractionPharmacyPharmacies1));
			this._InteractionPharmacySubCategories = new EntitySet<InteractionPharmacySubCategory>(new Action<InteractionPharmacySubCategory>(this.attach_InteractionPharmacySubCategories), new Action<InteractionPharmacySubCategory>(this.detach_InteractionPharmacySubCategories));
			this._PharmacyCommercials = new EntitySet<PharmacyCommercial>(new Action<PharmacyCommercial>(this.attach_PharmacyCommercials), new Action<PharmacyCommercial>(this.detach_PharmacyCommercials));
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[Column(Storage="_chemicalName", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string chemicalName
		{
			get
			{
				return this._chemicalName;
			}
			set
			{
				if ((this._chemicalName != value))
				{
					this.OnchemicalNameChanging(value);
					this.SendPropertyChanging();
					this._chemicalName = value;
					this.SendPropertyChanged("chemicalName");
					this.OnchemicalNameChanged();
				}
			}
		}
		
		[Column(Storage="_greekName", DbType="NChar(50)")]
		public string greekName
		{
			get
			{
				return this._greekName;
			}
			set
			{
				if ((this._greekName != value))
				{
					this.OngreekNameChanging(value);
					this.SendPropertyChanging();
					this._greekName = value;
					this.SendPropertyChanged("greekName");
					this.OngreekNameChanged();
				}
			}
		}
		
		[Column(Storage="_indication", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string indication
		{
			get
			{
				return this._indication;
			}
			set
			{
				if ((this._indication != value))
				{
					this.OnindicationChanging(value);
					this.SendPropertyChanging();
					this._indication = value;
					this.SendPropertyChanged("indication");
					this.OnindicationChanged();
				}
			}
		}
		
		[Column(Storage="_contraIndication", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string contraIndication
		{
			get
			{
				return this._contraIndication;
			}
			set
			{
				if ((this._contraIndication != value))
				{
					this.OncontraIndicationChanging(value);
					this.SendPropertyChanging();
					this._contraIndication = value;
					this.SendPropertyChanged("contraIndication");
					this.OncontraIndicationChanged();
				}
			}
		}
		
		[Column(Storage="_undesirableReactions", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string undesirableReactions
		{
			get
			{
				return this._undesirableReactions;
			}
			set
			{
				if ((this._undesirableReactions != value))
				{
					this.OnundesirableReactionsChanging(value);
					this.SendPropertyChanging();
					this._undesirableReactions = value;
					this.SendPropertyChanged("undesirableReactions");
					this.OnundesirableReactionsChanged();
				}
			}
		}
		
		[Column(Storage="_dose", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string dose
		{
			get
			{
				return this._dose;
			}
			set
			{
				if ((this._dose != value))
				{
					this.OndoseChanging(value);
					this.SendPropertyChanging();
					this._dose = value;
					this.SendPropertyChanged("dose");
					this.OndoseChanged();
				}
			}
		}
		
		[Column(Storage="_interactionGeneral", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string interactionGeneral
		{
			get
			{
				return this._interactionGeneral;
			}
			set
			{
				if ((this._interactionGeneral != value))
				{
					this.OninteractionGeneralChanging(value);
					this.SendPropertyChanging();
					this._interactionGeneral = value;
					this.SendPropertyChanged("interactionGeneral");
					this.OninteractionGeneralChanged();
				}
			}
		}
		
		[Column(Storage="_subCategoryName", DbType="NChar(350) NOT NULL", CanBeNull=false)]
		public string subCategoryName
		{
			get
			{
				return this._subCategoryName;
			}
			set
			{
				if ((this._subCategoryName != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._subCategoryName = value;
					this.SendPropertyChanged("subCategoryName");
					this.OnsubCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacyPharmacy", Storage="_InteractionPharmacyPharmacies", ThisKey="chemicalName", OtherKey="pharmacyname1")]
		public EntitySet<InteractionPharmacyPharmacy> InteractionPharmacyPharmacies
		{
			get
			{
				return this._InteractionPharmacyPharmacies;
			}
			set
			{
				this._InteractionPharmacyPharmacies.Assign(value);
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacyPharmacy1", Storage="_InteractionPharmacyPharmacies1", ThisKey="chemicalName", OtherKey="pharmacyname2")]
		public EntitySet<InteractionPharmacyPharmacy> InteractionPharmacyPharmacies1
		{
			get
			{
				return this._InteractionPharmacyPharmacies1;
			}
			set
			{
				this._InteractionPharmacyPharmacies1.Assign(value);
			}
		}
		
		[Association(Name="PharmacyChemical_InteractionPharmacySubCategory", Storage="_InteractionPharmacySubCategories", ThisKey="chemicalName", OtherKey="chemicalName")]
		public EntitySet<InteractionPharmacySubCategory> InteractionPharmacySubCategories
		{
			get
			{
				return this._InteractionPharmacySubCategories;
			}
			set
			{
				this._InteractionPharmacySubCategories.Assign(value);
			}
		}
		
		[Association(Name="PharmacyChemical_PharmacyCommercial", Storage="_PharmacyCommercials", ThisKey="chemicalName", OtherKey="chemicalName")]
		public EntitySet<PharmacyCommercial> PharmacyCommercials
		{
			get
			{
				return this._PharmacyCommercials;
			}
			set
			{
				this._PharmacyCommercials.Assign(value);
			}
		}
		
		[Association(Name="SubCategory_PharmacyChemical", Storage="_SubCategory", ThisKey="subCategoryName", OtherKey="subCategoryName", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.PharmacyChemicals.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.PharmacyChemicals.Add(this);
						this._subCategoryName = value.subCategoryName;
					}
					else
					{
						this._subCategoryName = default(string);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InteractionPharmacyPharmacies(InteractionPharmacyPharmacy entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = this;
		}
		
		private void detach_InteractionPharmacyPharmacies(InteractionPharmacyPharmacy entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = null;
		}
		
		private void attach_InteractionPharmacyPharmacies1(InteractionPharmacyPharmacy entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical1 = this;
		}
		
		private void detach_InteractionPharmacyPharmacies1(InteractionPharmacyPharmacy entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical1 = null;
		}
		
		private void attach_InteractionPharmacySubCategories(InteractionPharmacySubCategory entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = this;
		}
		
		private void detach_InteractionPharmacySubCategories(InteractionPharmacySubCategory entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = null;
		}
		
		private void attach_PharmacyCommercials(PharmacyCommercial entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = this;
		}
		
		private void detach_PharmacyCommercials(PharmacyCommercial entity)
		{
			this.SendPropertyChanging();
			entity.PharmacyChemical = null;
		}
	}
	
	[Table(Name="dbo.PharmacyCommercial")]
	public partial class PharmacyCommercial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _chemicalName;
		
		private string _name;
		
		private string _company;
		
		private string _morph;
		
		private EntityRef<PharmacyChemical> _PharmacyChemical;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnchemicalNameChanging(string value);
    partial void OnchemicalNameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnmorphChanging(string value);
    partial void OnmorphChanged();
    #endregion
		
		public PharmacyCommercial()
		{
			this._PharmacyChemical = default(EntityRef<PharmacyChemical>);
			OnCreated();
		}
		
		[Column(Storage="_chemicalName", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string chemicalName
		{
			get
			{
				return this._chemicalName;
			}
			set
			{
				if ((this._chemicalName != value))
				{
					if (this._PharmacyChemical.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchemicalNameChanging(value);
					this.SendPropertyChanging();
					this._chemicalName = value;
					this.SendPropertyChanged("chemicalName");
					this.OnchemicalNameChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_company", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this.OncompanyChanging(value);
					this.SendPropertyChanging();
					this._company = value;
					this.SendPropertyChanged("company");
					this.OncompanyChanged();
				}
			}
		}
		
		[Column(Storage="_morph", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string morph
		{
			get
			{
				return this._morph;
			}
			set
			{
				if ((this._morph != value))
				{
					this.OnmorphChanging(value);
					this.SendPropertyChanging();
					this._morph = value;
					this.SendPropertyChanged("morph");
					this.OnmorphChanged();
				}
			}
		}
		
		[Association(Name="PharmacyChemical_PharmacyCommercial", Storage="_PharmacyChemical", ThisKey="chemicalName", OtherKey="chemicalName", IsForeignKey=true)]
		public PharmacyChemical PharmacyChemical
		{
			get
			{
				return this._PharmacyChemical.Entity;
			}
			set
			{
				PharmacyChemical previousValue = this._PharmacyChemical.Entity;
				if (((previousValue != value) 
							|| (this._PharmacyChemical.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PharmacyChemical.Entity = null;
						previousValue.PharmacyCommercials.Remove(this);
					}
					this._PharmacyChemical.Entity = value;
					if ((value != null))
					{
						value.PharmacyCommercials.Add(this);
						this._chemicalName = value.chemicalName;
					}
					else
					{
						this._chemicalName = default(string);
					}
					this.SendPropertyChanged("PharmacyChemical");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _subCategoryName;
		
		private string _categoryName;
		
		private EntitySet<InteractionPharmacySubCategory> _InteractionPharmacySubCategories;
		
		private EntitySet<PharmacyChemical> _PharmacyChemicals;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubCategoryNameChanging(string value);
    partial void OnsubCategoryNameChanged();
    partial void OncategoryNameChanging(string value);
    partial void OncategoryNameChanged();
    #endregion
		
		public SubCategory()
		{
			this._InteractionPharmacySubCategories = new EntitySet<InteractionPharmacySubCategory>(new Action<InteractionPharmacySubCategory>(this.attach_InteractionPharmacySubCategories), new Action<InteractionPharmacySubCategory>(this.detach_InteractionPharmacySubCategories));
			this._PharmacyChemicals = new EntitySet<PharmacyChemical>(new Action<PharmacyChemical>(this.attach_PharmacyChemicals), new Action<PharmacyChemical>(this.detach_PharmacyChemicals));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_subCategoryName", DbType="NChar(350) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subCategoryName
		{
			get
			{
				return this._subCategoryName;
			}
			set
			{
				if ((this._subCategoryName != value))
				{
					this.OnsubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._subCategoryName = value;
					this.SendPropertyChanged("subCategoryName");
					this.OnsubCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_categoryName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string categoryName
		{
			get
			{
				return this._categoryName;
			}
			set
			{
				if ((this._categoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryNameChanging(value);
					this.SendPropertyChanging();
					this._categoryName = value;
					this.SendPropertyChanged("categoryName");
					this.OncategoryNameChanged();
				}
			}
		}
		
		[Association(Name="SubCategory_InteractionPharmacySubCategory", Storage="_InteractionPharmacySubCategories", ThisKey="subCategoryName", OtherKey="subCategoryName")]
		public EntitySet<InteractionPharmacySubCategory> InteractionPharmacySubCategories
		{
			get
			{
				return this._InteractionPharmacySubCategories;
			}
			set
			{
				this._InteractionPharmacySubCategories.Assign(value);
			}
		}
		
		[Association(Name="SubCategory_PharmacyChemical", Storage="_PharmacyChemicals", ThisKey="subCategoryName", OtherKey="subCategoryName")]
		public EntitySet<PharmacyChemical> PharmacyChemicals
		{
			get
			{
				return this._PharmacyChemicals;
			}
			set
			{
				this._PharmacyChemicals.Assign(value);
			}
		}
		
		[Association(Name="Category_SubCategory", Storage="_Category", ThisKey="categoryName", OtherKey="categoryName", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._categoryName = value.categoryName;
					}
					else
					{
						this._categoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InteractionPharmacySubCategories(InteractionPharmacySubCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_InteractionPharmacySubCategories(InteractionPharmacySubCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
		
		private void attach_PharmacyChemicals(PharmacyChemical entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_PharmacyChemicals(PharmacyChemical entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
	}
}
#pragma warning restore 1591
